{
	"info": {
		"_postman_id": "afb7d1f5-cf56-4169-b4ce-f16e49fe5cc7",
		"name": "HM_gr32",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/user_info_3_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//создаем переменную\r",
							"let req_f = request.data;\r",
							"//достаем данные из response\r",
							"let resp_f = pm.response.json();\r",
							"//Проверить, что req Age равно. Достаем значение age\r",
							"let req_age = + req_f.age;\r",
							"let resp_age = + resp_f.age;\r",
							"\r",
							"let req_salary = req_f.salary;\r",
							"//забрать сэлари из ответа (resp)\r",
							"let resp_salary_1_5_years = +resp_f.family.u_salary_1_5_year;\r",
							"//проверка children \r",
							"let children_2_name = resp_f.family.children[1][0];\r",
							"\r",
							"//результат переменной\r",
							"console.log(req_f);\r",
							"console.log(\"req_age =\" + req_age);\r",
							"console.log(\"resp_age = \" + resp_f.age);\r",
							"//проверка типа данных\r",
							"console.log(\"resp_age =\" + typeof resp_age);\r",
							"//проверка сэлари\r",
							"console.log(resp_salary_1_5_years);\r",
							"\r",
							"console.log(resp_f.family.children);\r",
							"\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Check_salary_1_5year\", function () {\r",
							"    pm.expect(req_salary*4).to.eql(resp_salary_1_5_years);\r",
							"});\r",
							"\r",
							"pm.test(\"Check_children_2_name\", function () {\r",
							"    pm.expect(children_2_name).to.eql(\"Kate\");\r",
							"});\r",
							"\r",
							"//проверка, что значение Vadim это стринг\r",
							"pm.test(\"name_type\", function () {\r",
							"    pm.expect(resp_f.name).to.be.a(\"String\");\r",
							"});\r",
							"\r",
							"//проверка, что salary = number\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(resp_f.salary).to.be.a(\"Number\");\r",
							"});\r",
							"\r",
							"//проверка, что у нас есть property family\r",
							"pm.test(\"have_family_property\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"family\");\r",
							"});\r",
							"//проверка, что у нас на главном уровне есть ключи age, family,salary\r",
							"pm.test(\"all_properties\", function () {\r",
							"    pm.expect(resp_f).to.have.all.keys(\"age\", \"family\", \"name\", \"salary\");\r",
							"});\r",
							"// проверка инных properties внутри family\r",
							"pm.test(\"inner_properties\", function () {\r",
							"    pm.expect(resp_f.family).to.have.all.keys(\"children\",\"u_salary_1_5_year\");\r",
							"});\r",
							"//проверка с помощью ANY. Находит какие-то значения из перечисленных\r",
							"pm.test(\"All_properties\", function () {\r",
							"    pm.expect(resp_f).to.have.any.keys(\"age\",\"familuyyyyy\", \"nameeeee\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Vadim",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "default"
						},
						{
							"key": "age",
							"value": "25",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//1.Вставить параметр salary из окружения в request\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Iren",
							"type": "default"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/object_info_1?name=Max&age=45&weight=180",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Max"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "weight",
							"value": "180"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/object_info_2?name=Max&age=45&salary=5000",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Max"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"//Спарсить request\r",
							"let req_data = request.data;\r",
							"//Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"let have_name = resp_f.name;\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let have_age = resp_f.age;\r",
							"//Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"let have_salary = resp_f.salary;\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"let have_dog_name = resp_f.family.pets.dog;\r",
							"let have_real_dog = resp_f.family.pets.dog.name;\r",
							"let have_dog_age = resp_f.family.pets.dog.age;\r",
							"\r",
							"console.log(\"have_name =\" + resp_f.name);\r",
							"console.log(\"have_age =\" + resp_f.age);\r",
							"console.log(\"have_salary = \" + resp_f.salary);\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family);\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"console.log(have_dog_name);\r",
							"console.log(have_dog_age);\r",
							"\r",
							"//Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"have_name\", function () {\r",
							"    pm.expect(have_name).to.eql(\"Kate\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"have_age\", function () {\r",
							"    pm.expect(have_age).to.eql(\"21\");\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"pm.test(\"have_salary\", function () {\r",
							"    pm.expect(have_salary).to.eql(3000);\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"have_dog_name\", function () {\r",
							"    pm.expect(have_dog_name).to.have.property(\"name\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"have_real_dog\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"have_dog_age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/object_info_3?name=Kate&age=21&salary=3000",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "21"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос\r",
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3.Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"//4.Спарсить request \r",
							"let req = pm.request.url.query.toObject();\r",
							"//5.Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"take_name_from_url\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//6.Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"take_age_from_url\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"//7.Вывести в консоль параметр salary из request\r",
							"console.log(req.salary);\r",
							"//8.Вывести в консоль параметр salary из response\r",
							"console.log(jsonData.salary);\r",
							"//9.Вывести в консоль 0-й элемент параметра salary из response\r",
							"let salary_0 = jsonData.salary[0];\r",
							"console.log(salary_0);\r",
							"//10.Вывести в консоль 1-й элемент параметра salary из response\r",
							"let salary_1 = jsonData.salary[1];\r",
							"console.log(salary_1);\r",
							"//11.Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"let salary_2 = jsonData.salary[2];\r",
							"console.log(salary_2);\r",
							"//12.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"salary_element_0\", function () {\r",
							"    pm.expect(salary_0).to.eql(+req.salary);\r",
							"});\r",
							"//13.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"salary_element_1\", function () {\r",
							"    pm.expect(+salary_1).to.eql(+req.salary*2);\r",
							"});\r",
							"//14.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_element_2\", function () {\r",
							"    pm.expect(+salary_2).to.eql(+req.salary*3);\r",
							"});\r",
							"//15.Создать в окружении переменную name\r",
							"//16.Создать в окружении переменную age\r",
							"//17.Создать в окружении переменную salary\r",
							"//18.Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"//19.Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (i = 0; i < jsonData.salary.length; i++)\r",
							"{\r",
							"    console.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/object_info_4?name=Max&age=36&salary=10000",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Max"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/get_method?name=Kate&age=30",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "30"
						}
					]
				}
			},
			"response": []
		}
	]
}